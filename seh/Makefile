# Supports MY_COMPILE_FLAGS environment variable.
# Set MY_COMPILE_FLAGS to common C/CPP compiler flags like:
#   -Wfatal-errors so that the build will stop after the first error.
#
# Make sure MY_COMPILE_FLAGS is exported, else this Makefile won't see it.

# output binary
BIN = seh

# source files
SRCS = seh.cpp
#SRCS += $(wildcard ./base/*.cpp)

# files included in the tarball generated by 'make dist' (e.g. add LICENSE file)
DISTFILES = $(BIN)

# filename of the tar archive generated by 'make dist'
DISTOUTPUT = $(BIN).tar.gz

# intermediate directory for generated object files
OBJDIR = .o

# intermediate directory for generated dependency files
DEPDIR = .d

# object files, auto generated from source files
OBJS = $(patsubst %,$(OBJDIR)/%.o,$(basename $(SRCS)))

# dependency files, auto generated from source files
DEPS = $(patsubst %,$(DEPDIR)/%.d,$(basename $(SRCS)))

# compilers (at least gcc and clang) don't create the subdirectories automatically
$(shell mkdir -p $(dir $(OBJS)) >/dev/null)
$(shell mkdir -p $(dir $(DEPS)) >/dev/null)

# C compiler
CC = gcc

# C++ compiler
CXX = gcc

# linker
LD = gcc

# tar
TAR = tar

# C flags
CFLAGS =

# C++ flags
CXXFLAGS =

# C/C++ flags
COMMONFLAGS = -std=c++11 -x c++ -fpermissive -fexceptions ${MY_COMPILE_FLAGS}

# defines
DEFINES = -DLINUX -DUSE_POSIX_SIGACTION -Wfatal-errors

# include flags
INCFLAGS = 

# linker flags
LDFLAGS =

# linker libs
LDLIBS = -lstdc++

# flags required for dependency generation; passed to compilers
DEPFLAGS = -MT $@ -MD -MP -MF $(DEPDIR)/$*.Td

# compile C source files
COMPILE.c = $(CC) $(INCFLAGS) $(DEPFLAGS) $(CFLAGS) $(COMMONFLAGS) $(DEFINES) -c -o $@

# compile C++ source files
COMPILE.cc = $(CXX) $(INCFLAGS) $(DEPFLAGS) $(CXXFLAGS) $(COMMONFLAGS) $(DEFINES) -c -o $@

# link object files to binary
LINK.o = -o $@ $(LDFLAGS) $(LDLIBS)

# precompile step
PRECOMPILE =

# postcompile step
POSTCOMPILE = mv -f $(DEPDIR)/$*.Td $(DEPDIR)/$*.d

##############
# DEFAULT RULE - debug build - Call with: "make"
##############
debug: DEFINES +=-g -DDEBUG
debug: $(BIN)
#	cp ../third_party/ccextractor/linux/ccextractor .

##############
# RELEASE RULE - Call with: "make release"
##############
release: $(BIN)
#	cp ../third_party/ccextractor/linux/ccextractor .

dist: $(DISTFILES)
	$(TAR) -cvzf $(DISTOUTPUT) $^

.PHONY: clean
clean:
	$(RM) -r $(OBJDIR) $(DEPDIR)

.PHONY: distclean
distclean: clean
	$(RM) $(BIN) $(DISTOUTPUT)

.PHONY: install
install:
	@echo no install tasks configured

.PHONY: uninstall
uninstall:
	@echo no uninstall tasks configured

.PHONY: check
check:
	@echo no tests configured

.PHONY: help
help:
	@echo available targets: all dist clean distclean install uninstall check

#########
# Link it
#########
$(BIN): $(OBJS)
	$(LD) $^ $(LINK.o)

###############
# Build c files
###############
$(OBJDIR)/%.o: %.c
$(OBJDIR)/%.o: %.c $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.c) $<
	$(POSTCOMPILE)

#################
# Build cpp files
#################
$(OBJDIR)/%.o: %.cpp
$(OBJDIR)/%.o: %.cpp $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)

.PRECIOUS = $(DEPDIR)/%.d
$(DEPDIR)/%.d: ;

-include $(DEPS)
